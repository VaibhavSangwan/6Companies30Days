class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n=nums.size();
        sort(nums.begin(),nums.end());
         vector<int>dp(n,1);
         for(int i=1;i<n;i++){
             for(int j=i-1;j>=0;j--){
                 if(nums[i]%nums[j]==0){
                     dp[i]=max(dp[i],dp[j]+1);

                 }
             }
         }
         vector<int>ans;

         int maxx=-1;
         int prev=-1;
         for(int i=0;i<n;i++){
             maxx=max(maxx,dp[i]);
         }
        for(int i=n-1;i>=0;i--){
            if(dp[i]==maxx&&(prev%nums[i]==0||prev==-1)){
   ans.push_back(nums[i]);
   maxx=maxx-1;
   prev=nums[i];
            }
        }
        return ans;

      
    }
};
